回顾:
1.适用情况:
2.嵌套循环:
3.数组:引用类型，相同数据类型元素的集合
    int[] arr = new int[10];
	int[] arr = {1,5,7};
	int[] arr = new int[]{1,5,7};
	System.out.println(arr.length);
    下标(0开始，最大到.length-1)
	arr[0] = 100;
	arr[3] = 300; //数组下标越界
	System.out.println(arr[arr.length-1]);
	for(int i=0;i<arr.length;i++){
	  arr[i] = 100;
	  System.out.println(arr[i]);
	}
	System.arraycopy(a,1,a1,0,4);
	int[] a1 = Arrays.copyOf(a,6);
	a = Arrays.copyOf(a,a.length+1); //扩容
	Arrays.sort(arr); //升序
    冒泡:
	  1)5个数冒4轮
	  2)每一轮都是从第1个元素开始冒
        每一次都是和它的下一个元素比
	  3)冒出来的就不带它玩了





正课:
1.方法:
  1)封装一段特定的业务逻辑功能
  2)方法尽可能的独立，一个方法只干一件事
  3)方法可以被反复调用多次
  4)减少代码重复，有利于代码维护，有利于团队协作开发
2.方法的定义:
    修饰词 返回值类型 方法名(参数列表){
	  方法体
	}
3.方法的调用:
  3.1)无返回值: 方法名(有参传参);
  3.2)有返回值: 数据类型 变量 = 方法名(有参传参);
4.return:
  1)return 值; 1.1)结束方法的执行  1.2)返回结果给调用方
  2)return;    2.1)结束方法的执行





猜字符小游戏:
一.设计数据结构:变量
   1)char[] chs;   //随机字符数组
   2)char[] input; //用户输入的字符数组
   3)int[] result; //对比的结果
   4)int score;    //得分
二.设计程序结构:方法
   1)主方法:
     public static void main(String[] args){
	   //...
	 }
   2)生成随机字符数组
     public static char[] generate(){
	   char[] chs = new char[5];
       //...
	   return chs;
	 }
   3)对比:随机字符数组与用户输入的字符数组
     public static int[] check(char[] chs,char[] input){
	   int[] result = new int[2];
	   //...
	   return result;
	 }
三.设计算法:方法体
        String str = "hello";
   1)将字符串转换为大写字母和小写字母
        str = str.toUpperCase(); //转成大写字母
		str = str.toLowerCase(); //转成小写字母
   2)将字符转换为字符数组
        char[] input = str.toCharArray();
   3)判断字符串内容是否相等
        if(str.equals("EXIT")){
		}




练习:
1)完成猜字符小游戏:
  1.1)完成main()主方法
  1.2)完成generate()生成随机字符数组方法
  1.3)完成check()对比方法
















小代码---------------------吃糖豆
项目-----------------------吃药


把以后的每一个项目都重视起来



晚自习三个小时
















基本类型判断相等，使用==

引用类型判断相等，与基本类型是不同的










1)获取随机字符数组chs
2)猜吧!接收用户输入的字符数组input
3)对比chs与input，得到对比结果:
  3.1)猜对了，算分，输出，结束循环
  3.2)猜错了，输出几个字符对和几个位置对，返回第2步继续


String str = scan.next();
char[] input = str.toCharArray();


"ABC"
input[0]='A'
input[1]='B'
input[2]='C'











Math.random()------------0.0到0.9999999999...

//生成随机字符数组
public static char[] generate(){
  char[] chs = new char[5]; //随机字符数组
  
  char[] letters = {'A','B','C','D',...,'Y','Z'};
  boolean[] flags = new boolean[letters.length]; //开关数组
  for(int i=0;i<chs.length;i++){
    do{
	  int index = (int)(Math.random()*26); //下标
	}while(flags[index]==true);
	chs[i] = letters[index];
	flags[index] = true;
  }
  i=0 index=0  chs[0]='A'       flags[0]=true
  i=1 index=25 chs[1]='Z'       flags[25]=true
  i=2 index=0/25/0/1 chs[2]='B' flags[1]=true
  i=3 index=0/1/25
    







  i=0 index=0  chs[0]='A'
  i=1 index=25 chs[1]='Z'
  i=2 index=1  chs[2]='B'
  i=3
  i=4

  return chs;
}


















位置对是在字符对的基础之上的

public static int[] check(char[] chs,char[] input){
  int[] result = new int[2]; //0,0--假设result[0]为位置对，result[1]为字符对

  for(int i=0;i<chs.length;i++){
    for(int j=0;j<input.length;j++){
	  if(chs[i]==input[j]){ //字符对
	    result[1]++; //字符对个数增1
        if(i==j){ //位置对
		  result[0]++; //位置对个数增1
		}
		break;
	  }
	}
  }
  i=0
    j=0 chs0-input0
    j=1 chs0-input1
	j=2 chs0-input2
	j=3 chs0-input3
	j=4 chs0-input4
  i=1
    j=0 chs1-input0
    j=1 chs1-input1
	j=2 chs1-input2
	j=3 chs1-input3
	j=4 chs1-input4
  i=2
    j=0 chs2-input0
    j=1 chs2-input1
	j=2 chs2-input2
	j=3 chs2-input3
	j=4 chs2-input4

  return result;
}









int a,b;
int[] r;

char c1,c2,c3,c4,c5;
char[] chs;











数怎么存














public static void main(String[] args){
  say();
  sayHi("zhangsan");
  double a = getNum(); 输出a
  int b = plus(5,6); 输出b
  int c=5,d=6;
  int m = plus(c,d); 输出m
}
public static void say(){} 
public static void sayHi(String name){}
public static double getNum(){
  return 88.88;
}
public static int plus(int num1,int num2){
  return num1+num2;
}



























猜字符小游戏:












MethodDemo



方法可以无参也可以有参，有参可以使方法更灵活


int    a = scan.    nextInt();
double b = scan.    nextDouble();
double c = Math.    random();------------无参数

System.out.         println("HelloWorld");
System.             arraycopy(a,1,a1,0,4);
Arrays.             sort(arr);
double d = Math.    sqrt(25);
int[] a1 = Arrays.  copyOf(a,6);---------有参数


double c = Math.random(); 
double d = Math.sqrt(25);

random()无参，只能得到0.0到0.999999....之间的随机数
sqrt()有参，想得谁的平方根就得谁的平方根

假设random()有参
  double a = Math.random(1,1000);
  double a = Math.random(0,99);
  double a = Math.random(18,25);










方法可以有返回值，也可以没有返回值
1)无返回值，将返回值类型设置为void
2)有返回值，将返回值类型设置为具体的数据类型即可

若方法执行完后，还需要用到方法中的某个数据----有返回值
                 不需要用到方法中的某个数据----无返回值


System.out.println("HelloWorld");
System.arraycopy(a,1,a1,0,4);
Arrays.sort(arr);--------------------无返回值

int    a = scan.nextInt();
double b = scan.nextDouble();
double c = Math.random();
double d = Math.sqrt(25);
int[] a1 = Arrays.copyOf(a,6);-------有返回值
















冒泡(){
  6句话
}











a(){
  存
}
b(){
  取
}
c(){
  转
}

张三-----调a()+b()+c()
李四-----调a()
王五-----调b()
赵六-----调c()
孙七-----


main(){
  调存款----1
  调取款----1
  调转帐----1
}

存款(){
  500
}
取款(){------------1调验证密码
  500
}
转帐(){------------1调验证密码
  1000
}
验证密码(){
  
}















质数:又称素数，只能被1和它本身整除的数

何时是质数?---------取余所有都不得0
何时不是质数?-------只要有得0的

结论:需要判断多次才能得到最终结果--------开关


5是质数:
  5%2/3/4-------------都不得0
7是质数:
  7%2/3/4/5/6---------都不得0
8不是质数:
  8%2/3/4/5/6/7-------有得0的
9不是质数:
  9%2/3/4/5/6/7/8-----有得0的

100
  %2/3/4/.../98/99
  %2/3/4/.../49/50
  %2/3/4/.../9/10

2/3/4/.../9/10
100%11/12/13/.../49/50-----------没有意义


100的平方根是10
81的平方根是9
36的平方根是6
16的平方根是4








100%51/52/53/54/.../98/99------------没有意义














